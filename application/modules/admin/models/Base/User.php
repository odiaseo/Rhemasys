<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Admin_Model_User', 'admin');

/**
 * Admin_Model_Base_User
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $firstname
 * @property string $lastname
 * @property string $username
 * @property date $dob_at
 * @property string $nickname
 * @property enum $gender
 * @property string $password
 * @property string $telephone
 * @property string $mobile
 * @property string $fax
 * @property string $email
 * @property string $company
 * @property string $image_file
 * @property string $website
 * @property timestamp $start_at
 * @property timestamp $end_at
 * @property integer $is_blocked
 * @property integer $is_active
 * @property integer $is_admin
 * @property integer $is_member
 * @property integer $is_online
 * @property integer $visits
 * @property integer $salutation_id
 * @property integer $usergroup_id
 * @property integer $admin_group_id
 * @property integer $admin_menu_id
 * @property integer $is_mailing
 * @property integer $role_id
 * @property string $note
 * @property Admin_Model_Role $Role
 * @property Admin_Model_AdminGroup $AdminGroup
 * @property Admin_Model_AdminMenu $AdminMenu
 * @property Admin_Model_Salutation $Salutation
 * @property Admin_Model_Usergroup $Usergroup
 * @property Doctrine_Collection $AdminSubsite
 * @property Doctrine_Collection $Subsites
 * @property Admin_Model_BlogPost $BlogPost
 * @property Admin_Model_BlogComment $BlogComment
 * @property Doctrine_Collection $User
 * @property Doctrine_Collection $Address
 * @property Doctrine_Collection $UserAddresses
 * @property Doctrine_Collection $SubsiteUsers
 * @property Admin_Model_Inquiry $Inquiry
 * @property Admin_Model_Event $Event
 * @property Admin_Model_PortfolioComment $PortfolioComment
 * 
 * @package    ##PACKAGE##
 * @subpackage RhemaSys
 * @author     Pele Odiase <info@rhema-webdesign.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class Admin_Model_Base_User extends Rhema_Model_Abstract
{
    public function setTableDefinition()
    {
        $this->setTableName('user');
        $this->hasColumn('firstname', 'string', 80, array(
             'type' => 'string',
             'notnull' => true,
             'minlength' => 2,
             'length' => '80',
             ));
        $this->hasColumn('lastname', 'string', 100, array(
             'type' => 'string',
             'notnull' => true,
             'minlength' => 2,
             'length' => '100',
             ));
        $this->hasColumn('username', 'string', 50, array(
             'type' => 'string',
             'notnull' => true,
             'unique' => true,
             'minlength' => 5,
             'length' => '50',
             ));
        $this->hasColumn('dob_at', 'date', null, array(
             'type' => 'date',
             'past' => true,
             ));
        $this->hasColumn('nickname', 'string', 50, array(
             'type' => 'string',
             'unique' => true,
             'length' => '50',
             ));
        $this->hasColumn('gender', 'enum', null, array(
             'type' => 'enum',
             'notnull' => true,
             'values' => 
             array(
              0 => 'male',
              1 => 'female',
             ),
             ));
        $this->hasColumn('password', 'string', 40, array(
             'type' => 'string',
             'notnull' => true,
             'minlength' => 5,
             'length' => '40',
             ));
        $this->hasColumn('telephone', 'string', 20, array(
             'type' => 'string',
             'length' => '20',
             ));
        $this->hasColumn('mobile', 'string', 11, array(
             'type' => 'string',
             'minlength' => 11,
             'length' => '11',
             ));
        $this->hasColumn('fax', 'string', 20, array(
             'type' => 'string',
             'length' => '20',
             ));
        $this->hasColumn('email', 'string', 80, array(
             'type' => 'string',
             'notnull' => true,
             'email' => true,
             'unique' => true,
             'length' => '80',
             ));
        $this->hasColumn('company', 'string', 80, array(
             'type' => 'string',
             'length' => '80',
             ));
        $this->hasColumn('image_file', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('website', 'string', 80, array(
             'type' => 'string',
             'length' => '80',
             ));
        $this->hasColumn('start_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'length' => '25',
             ));
        $this->hasColumn('end_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'future' => true,
             'length' => '25',
             ));
        $this->hasColumn('is_blocked', 'integer', 1, array(
             'type' => 'integer',
             'unsigned' => true,
             'default' => 0,
             'length' => '1',
             ));
        $this->hasColumn('is_active', 'integer', 1, array(
             'type' => 'integer',
             'default' => 1,
             'length' => '1',
             ));
        $this->hasColumn('is_admin', 'integer', 1, array(
             'type' => 'integer',
             'default' => 0,
             'length' => '1',
             ));
        $this->hasColumn('is_member', 'integer', 1, array(
             'type' => 'integer',
             'default' => 0,
             'length' => '1',
             ));
        $this->hasColumn('is_online', 'integer', 1, array(
             'type' => 'integer',
             'default' => 0,
             'length' => '1',
             ));
        $this->hasColumn('visits', 'integer', 4, array(
             'type' => 'integer',
             'default' => 0,
             'unsigned' => true,
             'length' => '4',
             ));
        $this->hasColumn('salutation_id', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'default' => 1,
             'length' => '4',
             ));
        $this->hasColumn('usergroup_id', 'integer', 4, array(
             'type' => 'integer',
             'unsigned' => true,
             'notnull' => false,
             'default' => 1,
             'length' => '4',
             ));
        $this->hasColumn('admin_group_id', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => false,
             'default' => 1,
             'length' => '4',
             ));
        $this->hasColumn('admin_menu_id', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => false,
             'length' => '4',
             ));
        $this->hasColumn('is_mailing', 'integer', 1, array(
             'type' => 'integer',
             'default' => 1,
             'length' => '1',
             ));
        $this->hasColumn('role_id', 'integer', 4, array(
             'type' => 'integer',
             'default' => 1,
             'length' => '4',
             ));
        $this->hasColumn('note', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));


        $this->index('userindex', array(
             'fields' => 
             array(
              0 => 'email',
              1 => 'lastname',
              2 => 'dob_at',
             ),
             ));
        $this->option('type', 'INNODB');
        $this->option('collate', 'utf8_general_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Admin_Model_Role as Role', array(
             'local' => 'role_id',
             'foreign' => 'id'));

        $this->hasOne('Admin_Model_AdminGroup as AdminGroup', array(
             'local' => 'admin_group_id',
             'foreign' => 'id'));

        $this->hasOne('Admin_Model_AdminMenu as AdminMenu', array(
             'local' => 'admin_menu_id',
             'foreign' => 'id'));

        $this->hasOne('Admin_Model_Salutation as Salutation', array(
             'local' => 'salutation_id',
             'foreign' => 'id'));

        $this->hasOne('Admin_Model_Usergroup as Usergroup', array(
             'local' => 'usergroup_id',
             'foreign' => 'id'));

        $this->hasMany('Admin_Model_AdminSubsite as AdminSubsite', array(
             'refClass' => 'Admin_Model_UserSubsite',
             'local' => 'user_id',
             'foreign' => 'admin_subsite_id'));

        $this->hasMany('Admin_Model_AdminSubsite as Subsites', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasOne('Admin_Model_BlogPost as BlogPost', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasOne('Admin_Model_BlogComment as BlogComment', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Admin_Model_EcomOrder as User', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Admin_Model_AddressBook as Address', array(
             'refClass' => 'Admin_Model_UserAddress',
             'local' => 'user_id',
             'foreign' => 'address_book_id'));

        $this->hasMany('Admin_Model_UserAddress as UserAddresses', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasMany('Admin_Model_UserSubsite as SubsiteUsers', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasOne('Admin_Model_Inquiry as Inquiry', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasOne('Admin_Model_Event as Event', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $this->hasOne('Admin_Model_PortfolioComment as PortfolioComment', array(
             'local' => 'id',
             'foreign' => 'user_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $rhema_model_template_subsite0 = new Rhema_Model_Template_Subsite();
        $softdelete0 = new Doctrine_Template_SoftDelete();
        $blameable0 = new Doctrine_Template_Blameable();
        $this->actAs($timestampable0);
        $this->actAs($rhema_model_template_subsite0);
        $this->actAs($softdelete0);
        $this->actAs($blameable0);
    }
}