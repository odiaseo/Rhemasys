<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Admin_Model_EcomOrder', 'admin');

/**
 * Admin_Model_Base_EcomOrder
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $title
 * @property string $first_name
 * @property string $last_name
 * @property string $payer_email
 * @property string $mc_gross
 * @property string $invoice
 * @property string $protection_eligibility
 * @property string $address_name
 * @property string $address_street
 * @property string $address_city
 * @property string $address_status
 * @property string $address_state
 * @property string $address_zip
 * @property string $address_country
 * @property string $residence_country
 * @property string $address_country_code
 * @property string $payer
 * @property string $tax
 * @property string $payment_date
 * @property string $payment_status
 * @property string $notify_version
 * @property string $custom
 * @property string $payer_status
 * @property string $business
 * @property integer $quantity
 * @property string $verify_sign
 * @property string $txn
 * @property string $payment_type
 * @property string $receiver_email
 * @property string $receiver
 * @property string $pending_reason
 * @property string $txn_type
 * @property string $item_name
 * @property string $mc_currency
 * @property string $item_number
 * @property string $test_ipn
 * @property string $transaction_subject
 * @property string $handling_amount
 * @property string $payment_gross
 * @property string $shipping
 * @property integer $user_id
 * @property integer $is_virtual
 * @property string $download
 * @property Admin_Model_User $User
 * @property Doctrine_Collection $EcomOrderDetail
 * @property Doctrine_Collection $EcomOrder
 * 
 * @package    ##PACKAGE##
 * @subpackage RhemaSys
 * @author     Pele Odiase <info@rhema-webdesign.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class Admin_Model_Base_EcomOrder extends Rhema_Model_Abstract
{
    public function setTableDefinition()
    {
        $this->setTableName('ecom_order');
        $this->hasColumn('title', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('first_name', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('last_name', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('payer_email', 'string', 150, array(
             'type' => 'string',
             'email' => true,
             'default' => '',
             'length' => '150',
             ));
        $this->hasColumn('mc_gross', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('invoice', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('protection_eligibility', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('address_name', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('address_street', 'string', 150, array(
             'type' => 'string',
             'length' => '150',
             ));
        $this->hasColumn('address_city', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('address_status', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('address_state', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('address_zip', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('address_country', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('residence_country', 'string', 10, array(
             'type' => 'string',
             'length' => '10',
             ));
        $this->hasColumn('address_country_code', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('payer', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('tax', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('payment_date', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('payment_status', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('notify_version', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('custom', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('payer_status', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('business', 'string', 150, array(
             'type' => 'string',
             'length' => '150',
             ));
        $this->hasColumn('quantity', 'integer', 8, array(
             'type' => 'integer',
             'length' => '8',
             ));
        $this->hasColumn('verify_sign', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('txn', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('payment_type', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('receiver_email', 'string', 150, array(
             'type' => 'string',
             'email' => true,
             'default' => '',
             'length' => '150',
             ));
        $this->hasColumn('receiver', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('pending_reason', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('txn_type', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('item_name', 'string', 150, array(
             'type' => 'string',
             'length' => '150',
             ));
        $this->hasColumn('mc_currency', 'string', 10, array(
             'type' => 'string',
             'length' => '10',
             ));
        $this->hasColumn('item_number', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('test_ipn', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('transaction_subject', 'string', 150, array(
             'type' => 'string',
             'length' => '150',
             ));
        $this->hasColumn('handling_amount', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('payment_gross', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('shipping', 'string', 45, array(
             'type' => 'string',
             'length' => '45',
             ));
        $this->hasColumn('user_id', 'integer', 8, array(
             'type' => 'integer',
             'length' => '8',
             ));
        $this->hasColumn('is_virtual', 'integer', 1, array(
             'type' => 'integer',
             'default' => 0,
             'length' => '1',
             ));
        $this->hasColumn('download', 'string', 150, array(
             'type' => 'string',
             'length' => '150',
             ));

        $this->option('type', 'INNODB');
        $this->option('collate', 'utf8_general_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Admin_Model_User as User', array(
             'local' => 'user_id',
             'foreign' => 'id'));

        $this->hasMany('Admin_Model_EcomProduct as EcomOrderDetail', array(
             'refClass' => 'Admin_Model_EcomOrderDetail',
             'local' => 'ecom_order_id',
             'foreign' => 'ecom_product_id'));

        $this->hasMany('Admin_Model_EcomOrderDetail as EcomOrder', array(
             'local' => 'id',
             'foreign' => 'ecom_order_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $rhema_model_template_subsite0 = new Rhema_Model_Template_Subsite();
        $softdelete0 = new Doctrine_Template_SoftDelete();
        $blameable0 = new Doctrine_Template_Blameable();
        $this->actAs($timestampable0);
        $this->actAs($rhema_model_template_subsite0);
        $this->actAs($softdelete0);
        $this->actAs($blameable0);
    }
}