<?php

/**
 * Admin_Model_AdminMenu
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    ##PACKAGE##
 * @subpackage RhemaSys
 * @author     Pele Odiase <info@rhema-webesign.com>
 * @version    SVN: $Id: Builder.php 6716 2009-11-12 19:26:28Z jwage $
 */
class Admin_Model_AdminMenu extends Admin_Model_Base_AdminMenu{
	
	const SCOPE_KEY = 'scope';
	const SCOPE_ADMIN = 'admin_menu';
	const SCOPE_SITE = 'menu';
	const SCOPE_ECOM = 'ecom';
	const TYPE_OPHANS = 'ophans';
	const TYPE_ROOTS_ONLY = 'rootsOnly';
	
	protected $_model = null;
	
	public static function getOphanMenus(){
		$className = __CLASS__;
		$query = Doctrine_Query::create()
					->from("$className t")
					->where('t.root_id IS NULL')
					->andWhere('t.level IS NULL')//->orWhere('t.root_id =?', $root_id)
					->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY);
		$data = $query->execute();
		
		return $data;
	}
	
	public function frontEndMenus($option = array()){
		$field = key($option);
		$value = $option[$field];
		
		$table = get_class($this);
		$treeObject = Doctrine_Core::getTable($table)->getTree();
		$query = Doctrine_Query::create()
					->select('t.*')
					->from("$table t INDEXBY t.m_module")
					->orderBy('t.lft asc, t.sequence asc')
					->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY);
		$treeObject->setBaseQuery($query);
		$roots = $treeObject->fetchRoots();
		
		if('root_id' != $field){
			foreach($roots as $arr){
				if($arr[$field] == $value){
					$root_id = $arr['id'];
					break;
				}
			}
		}else{
			$root_id = $value;
		}
		
		$tree = $treeObject->fetchTree(array('root_id' => $root_id));
		$result['html'] = Rhema_Util::toHierarchy($tree);
		
		return $result;
	}
	
	public static function getDefaultRow($options = array(), $model = null){
		$class = $model ? $model : __CLASS__ ;
		$row   = new $class();	
			
		if($class == MODEL_PREFIX . 'AffiliateProductCategory'){
			if(!isset($options['affiliate_network_id'])){
				$options['affiliate_network_id'] = 1;
			}
		} 
		$row->fromArray($options);
 
		if(!isset($options['root_id'])){
			$row->root_id  = 0;
		}
			
		if(!isset($options['level'])){
			$row->level    = 0 ;
		}

		if(isset($row->slug) and !isset($options['slug']) and isset($options['title'])){
			$row->slug = Doctrine_Inflector::urlize($options['title']);
		}
		
		$row->lft      = 0;
		$row->rgt      = 0;		
		$row->sequence = 1;
		
	
		return $row;
	}
	
	public function getRoots($model = null, $mode = 'array'){ 
		$filter     = new Rhema_Filter_FormatModelName();		
		$model      = $model ? $filter->filter($model) : get_class($this);
		
		$treeObject = Doctrine_Core::getTable($model)->getTree();
		$query = $this->getBaseQuery($model, $mode);
		$treeObject->setBaseQuery($query);
		$tree = $treeObject->fetchRoots();
		$treeObject->resetBaseQuery();
		return $tree;
	}
	
	public static function getLayoutTrees(){
	
	}
	
	public static function listMenus($model, $options = array()){
		$service = new Rhema_Model_Service();
		$filter  = new Rhema_Dao_Filter(null);
    	$frmFilter = new Rhema_Filter_FormatModelName();
    	$model  = $frmFilter->filter($model);	
    	 
    		
		$filter->setModel($model)
		       ->addOrderBy('lft', Rhema_Dao_Filter::ORDER_ASC)
		       ->addOrderBy('sequence', Rhema_Dao_Filter::ORDER_ASC)
		       ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY);
		 
		foreach($options as $k => $v){
			$filter->addCondition($k, $v, Rhema_Dao_Filter::OP_EQ); 
		}
		 
		
		$data = $service->createQuery($filter)->execute();
	 
		return $data;
	}
	
	public static function getBaseQuery($model, $type = 'tree'){
		$mode = ($type == 'array') ? Doctrine_Core::HYDRATE_ARRAY : Doctrine_Core::HYDRATE_ARRAY_HIERARCHY;
		
		$filter = new Rhema_Dao_Filter();
		$filter->setModel($model)
			   ->setIndexBy('id') 
			   //->addCondition('level', 0, Rhema_Dao_Filter::OP_GT)
			   //->addOrderBy('title')
			   //->addOrderBy('sequence')
			   //->addOrderBy('lft')
			  // ->setDebug(true)
			   ->setHydrationMode($mode);
		if(Doctrine_Core::getTable($model)->isTree()){
			$filter->addJoin('Page', Rhema_Dao_Filter::LEFT_JOIN);
		}
		$query = Rhema_Model_Service::createQuery($filter);	   
 
		return $query;
	}

	public static function getRootByLevel($rootId, $model = null,  $level = 1){
		$model = $model ? $model : __CLASS__ ;
		$filter = new Rhema_Dao_Filter();
		$filter->setModel($model)
			   ->setIndexBy('id') 
			   ->addOrderBy('title')
			   ->addOrderBy('sequence')
			   ->addOrderBy('lft')
			   ->addCondition('root_id', $rootId)
			   ->addCondition('level', $level)
			  // ->setDebug(true)
			   ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY);
		if(Doctrine_Core::getTable($model)->isTree()){
			$filter->addJoin('Page', Rhema_Dao_Filter::LEFT_JOIN);
		}
		$query = Rhema_Model_Service::createQuery($filter);	   
 
		return $query->execute();		
	}	
	
	public static function buildTreeContainer($id, $table){
		$tree = self::getMenuTree(array('root_id' => $id), $table);
		$cFormat = Rhema_Util::toContainerFormat($tree);
		$container = new Zend_Navigation($cFormat);
		return $container;
	}
	
	/**
	 * Overwrites the function defined in Rhema_Model_Abstract (parent class)
	 * @param unknown_type $class
	 * @param unknown_type $gridTable
	 * @return Zend_Form_Element_Select
	 */
	public static function buildGridSelectOption($class, $gridTable){
		$table = Doctrine_Core::getTable($class);
		$tree = $table->getTree();
		$roots = $tree->fetchRoots();
		$options = array('select' => Rhema_Grid_Adapter_DoctrineModel::getBlankSelect());
		foreach($roots as $item){
			$title = $item['label'];
			
			foreach($tree->fetchTree(array('root_id' => $item['root_id'])) as $menu){
				$menuId = $menu['id'];
				$options[$title][$menuId] = $menu['label'];
			}
		}
		
		$select = new Zend_Form_Element_Select($class, array('multiOptions' => $options, 'decorators' => array('Viewhelper')));
		
		return $select;
	}
	public static function getCategoryTreeByRootId(array $options, $model = null, array $category = null ){  
		$rootId = isset($options['root_id']) ? $options['root_id'] : 1 ;
		$depth  = isset($options['depth']) ? $options['depth'] : null;
		$table  = Doctrine_Core::getTable($model);
		 
		$filter = new Rhema_Dao_Filter();
		$filter->setModel($model)
			   ->setIndexBy('id') 
			   ->addCondition('root_id', $rootId)
			   ->addOrderBy('title')
			   ->addOrderBy('sequence')
			   ->addOrderBy('lft')
			  // ->setDebug(true)
			   ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY_HIERARCHY);
		 
		$query = Rhema_Model_Service::createQuery($filter);	

		$treeObject = $table->getTree();
		$query      = $treeObject->returnQueryWithRootId($query, $rootId);	
		//pd("$query");
			
		$tree       = $query->execute();
		Rhema_Util::setCategory($category);
		$menus     = Rhema_Util::toContainerFormat($tree, $model, 0, false);
		return  new Zend_Navigation($menus);				
	}	
	
	public static function getTreeByRootId($rootId, $model = null, array $category = null ){			 
		$model      = $model ? $model : __CLASS__ ;
		$treeObject = Doctrine_Core::getTable($model)->getTree();
		$query      = self::getBaseQuery($model);
		 
		$treeObject->setBaseQuery($query);
		$tree = $treeObject->fetchTree(array('root_id' => $rootId));
		
		$treeObject->resetBaseQuery();
		Rhema_Util::setCategory($category);
		$menus     = Rhema_Util::toContainerFormat($tree, $model, 0, false);
		return  new Zend_Navigation($menus);		 
	}
 
    
	/**
	 * Generates a menu tree hierachy based on the root_id
	 * @param array $option
	 * @return Rhema_TreeDto
	 */
	public static function getMenuTree(array $option = null, $model = null, $loggedIn = false){
		if(! empty($option)){
			$field   = key($option);
			$value   = $option[$field];
			$tree    = array();
			$root_id = null;
			$model   = $model ? $model : __CLASS__ ;
			$treeObject = Doctrine_Core::getTable($model)->getTree();
			$query = self::getBaseQuery($model);
			$curModule = false ;
			$dto = new Rhema_Dto_TreeDto();
			
			$treeObject->setBaseQuery($query); 
			$roots = $treeObject->fetchRoots();
		  
			foreach($roots as $arr){
				if($arr[$field] == $value){
					$root_id = $arr['id'];
					$curModule = $arr; 
					break;
				}
			}
		 
			
			if(!$curModule){
				$curModule = new Admin_Model_AdminModule();
				$curModule = $curModule->toArray();
			}
			
			if($root_id){
				$tree = $treeObject->fetchTree(array('root_id' => $root_id));
			}
			
			$treeObject->resetBaseQuery();
			$admin = (substr($model, - 9) == 'AdminMenu');
			$menus = Rhema_Util::toContainerFormat($tree, $model, 0, $admin);
			$container = new Zend_Navigation($menus);
			
			if(isset($curModule[Rhema_Constant::MENU_MODULE]) and $curModule[Rhema_Constant::MENU_MODULE] == 'admin'){
				$additionalPages = self::getTableListArray();
			 	$cont = new Zend_Navigation($additionalPages);
			 	$dto->setTableList($cont); 
			}
			
			$dto->setRaw($tree)
				->setRoots($roots)
				->setMenus($menus)
				->setModuleData($curModule)
				->setContainer($container);
			
			return $dto;
		}
	}
	
	public static function getTableListArray(){
		$tabl = Rhema_Model_Service::factory('admin_table');
		$items = $tabl->listDatabaseTables();
		$return = array();
		$view = Zend_Layout::getMvcInstance()->getView();
		
		if(is_array($items['bycat'])){
			
			$cnt = 0;
			foreach($items['bycat'] as $catDesc => $list){
				$count = count($list);
				$page = array('type' => 'uri');
				$page['label'] = $catDesc;
				$page['uri'] = '#'; 
				$cnt ++;
				$sub = 0;
				foreach($list as $table => $label){
					$urlParam['table'] = $table;
					$href = $view->url($urlParam, 'grid-index');
					$page['pages'][$sub]['label'] = $label;
					$page['pages'][$sub]['uri'] = $href;
					
					$sub ++;
				}
				array_push($return, $page);
			}
		}
		//pd($return);
		return $return;
	}
	
	public static function getPageDefinition($model, $value, $key = Rhema_Constant::MENU_FRONTEND_KEY){
		try{
			$filter = new Rhema_Dao_Filter();
			$filter->setModel($model)
				   ->addJoin('Page', Rhema_Dao_Filter::INNER_JOIN)
				   ->addJoin('Page.PageHeader', Rhema_Dao_Filter::LEFT_JOIN, array('id','template_id'))
				   ->addJoin('Page.PageFooter', Rhema_Dao_Filter::LEFT_JOIN, array('id','template_id'))
				   ->setLimit(1)
				   //->setDebug()
				   ->addFields(array('title', 'page_id', 'id'))
				   ->addCondition('Page.' . $key, $value)
				   ->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY);
			$query = Rhema_Model_Service::createQuery($filter);
			
			/*$query = Doctrine_Query::create()
				->select('m.title, p.*, h.id, h.template_id, f.id,f.template_id')
				->from("$model m")
				->leftJoin('m.Page p')
				->leftJoin('p.PageHeader h')
				->leftJoin('p.PageFooter f')
				->where("m.$key=?", $value)
				->limit(1)
				->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY);*/
			
			$data = $query->fetchOne();
		}catch(Exception $e){
			throw new Rhema_Model_Exception('Caught exception: ' . $e->getMessage());
		}
		//pd($data);
		return $data;
	}
	
	public static function getRogueMenus($model){
		$query = Doctrine_Query::create()
					->from("$model t")
					->where('t.level IS NULL')
					->setHydrationMode(Doctrine_Core::HYDRATE_ARRAY_HIERARCHY)
					->andWhere('t.root_id IS NULL');
		
		$menus = $query->execute();
		
		if(count($menus)){
			$cFormat = Rhema_Util::toContainerFormat($menus, null, 0, true);
			$container = new Zend_Navigation($cFormat);
		}else{
			$container = false;
		}
		return $container;
	}
	/**
	 * @return the $_model
	 */
	public function getModel(){
		return $this->_model;
	}
	
	/**
	 * @param field_type $_model
	 */
	public function setModel($_model){
		$this->_model = $_model;
		return $this;
	}

}