<?php

/**
 * Admin_Model_AffiliateProduct
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage RhemaSys
 * @author     Pele Odiase <info@rhema-webdesign.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Admin_Model_AffiliateProduct extends Admin_Model_Base_AffiliateProduct
{
	const COUNT_STAT_KEY = 'COUNT_STAT_KEY';
    public static $cacheSuffix  = 	array(    		  
    		'brandCount',
    		'retailerCount',
    		'categoryCount',
    		'category'  , 
			'categoryMenu' ,
    		'retailers',
    		'featured' ,
    		'top50'	,
    		'contracts' ,
    		'gifts', 
    		'types',
    		'brands',
    		'categoryTree',
    	    'manufacturers'	,
    	    'categoryWithProducts',	
		    'brandWithProducts',
		    'retailerWithProducts',
    		'activeCount'		
    	);

    public static function softDeleteAll($feedId = false){
    	$daoFilter = new Rhema_Dao_Filter();
    	$time      = date(DB_DATE_FORMAT);
    	$daoFilter->setModel(__CLASS__)
    			  ->setQueryType(Rhema_Dao_Filter::QUERY_TYPE_UPDATE)
    			  ->setUpdateList(array('deleted_at' => "$time"))    ;
        if($feedId){
        	$daoFilter->addCondition('affiliate_feed_id', $feedId);
        }
    	return Rhema_Model_Service::createQuery($daoFilter)->execute();		  	
    }
	/**
	 * Enter description here ...
	 * @param unknown_type $items
	 * @param unknown_type $status
	 * @return Ambigous <Doctrine_Collection, mixed, PDOStatement, number, Doctrine_Adapter_Statement, Doctrine_Connection_Statement, unknown>
	 */
   
	public static function updateIndexStatus($items, $status){
    	$daoFilter = new Rhema_Dao_Filter();
    	$daoFilter->setModel(__CLASS__)
    			  ->setQueryType(Rhema_Dao_Filter::QUERY_TYPE_UPDATE)
    			  ->setUpdateList(array('index_status' => $status))
    			  //->setDebug(true)
    			  ->addCondition('id', $items, Rhema_Dao_Filter::OP_IN); 
  		$query =  Rhema_Model_Service::createQuery($daoFilter);
 
    	$param =  $query->execute(); 
    	$query->free(true);
    	
    	unset($query);
    	unset($items);
    	
    	return $param ;
	}
	
	/**
	 * Enter description here ...
	 * @return Ambigous <Doctrine_Collection, mixed, PDOStatement, number, Doctrine_Adapter_Statement, Doctrine_Connection_Statement, unknown>
	 */
	public static function resetIndexStatus(){
	    $daoFilter = new Rhema_Dao_Filter();
	    $daoFilter->setQueryType(Rhema_Dao_Filter::QUERY_TYPE_UPDATE)
	              ->setModel(__CLASS__) 
	              ->setUpdateList(array('index_status' => 'to_index'));
	    return Rhema_Model_Service::createQuery($daoFilter)->execute();
	                
	}
	
	/**
	 * Return product Ids for specified retailer types
	 * @param unknown_type $typeId
	 * @param unknown_type $limit
	 * @param unknown_type $page
	 * @return Zend_Paginator
	 */
	public function getProductIdByRetailerType($typeId, $limit = 50, $page = 1, $useCache = true){ 
    	$daoFilter = new Rhema_Dao_Filter();
    	$daoFilter->setLimit($limit) 
    			  ->setModel(__CLASS__)
    			  ->setPage($page)
    			  ->addField('id')
    			  //->setDebug(true)
    			  ->addCondition('index_status', Rhema_Search_Lucene::INDEX_STATUS_NO_INDEX, Rhema_Dao_Filter::OP_NE)
    			  ->addJoin('AffiliateRetailer', Rhema_Dao_Filter::INNER_JOIN, array('id'));
    			  
    	$op     = Rhema_Dao_Filter::OP_EQ ;		  
    	if(is_array($typeId)){
    		if(count($typeId) == 1){
    			$typeId = current($typeId);    			
    		}else{
    			$op     = Rhema_Dao_Filter::OP_IN ;
    		} 
    	}	
    	$daoFilter->addCondition('AffiliateRetailer.affiliate_retailer_type_id', $typeId, $op);  	  
    	//pd(Rhema_Model_Service::createQuery($daoFilter)->execute());
    	
    	return Rhema_Model_Service::getPaginator($daoFilter, $page, $useCache);		
	}
	
	public function getProductsByCategory($categoryId, $limit = 50, $page = 1, $paginate = true, $exclude = null){ 
		$categoryId = (array) $categoryId;
		$categoryId = array_unique(array_filter($categoryId));
		asort($categoryId);
    	$daoFilter = $this->_getProductFilters();
    	$daoFilter->setLimit($limit) 
    			  ->addOrderBy('created_at', Rhema_Dao_Filter::ORDER_DESC)
    			  ->addOrderBy('valid_to', Rhema_Dao_Filter::ORDER_ASC)
    			  //->addOrderBy('affiliate_product_type_id', Rhema_Dao_Filter::ORDER_ASC)
    			  //->setDebug(true)
    			  ->setPage($page);
    	$categoryId = count($categoryId) == 1	? current($categoryId) : $categoryId ;	  
    	if($categoryId){    		
    		$op   = is_array($categoryId) ? Rhema_Dao_Filter::OP_IN : Rhema_Dao_Filter::OP_EQ;
    		$daoFilter->addCondition('affiliate_product_category_id', $categoryId, $op); 
    	} 
    	
    	if($exclude){
    		$ids = (array) $exclude;
    		if(count($ids) == 1){
    			$daoFilter->addCondition('id', current($ids), Rhema_Dao_Filter::OP_NE);
    		}else{
    			$daoFilter->addCondition('id', $ids, Rhema_Dao_Filter::OP_NOT_IN); 
    		}
    	}
//pd(Rhema_Model_Service::createQuery($daoFilter));
    	if($paginate){
    		return Rhema_Model_Service::getPaginator($daoFilter, $page);
    	}else{
    		return Rhema_Model_Service::createQuery($daoFilter)->execute();
    	}
	}
	
	public function getProductsByBrand($brandId, $limit = 50, $page = 1){
		$brandId   = $brandId * 1;
    	$daoFilter = $this->_getProductFilters();
    	$daoFilter->setLimit($limit)
    			  //->addGroupBy('title')
    			  //->addAggregateFieldList('id', 'COUNT')    			  
    			  //->addOrderBy('affiliate_promotion_id', Rhema_Dao_Filter::ORDER_DESC) 
    			  ->setPage($page);
    	if($brandId){
    		$daoFilter->addCondition('affiliate_product_brand_id', $brandId); 
    	}
    			  
    	return Rhema_Model_Service::getPaginator($daoFilter, $page);
	}
	
	public function getProductsByRetailer($id, $limit = 50, $page = 1){
    	$daoFilter = $this->_getProductFilters();
    	$daoFilter->setLimit($limit) 
    			  //->addGroupBy('title')
    			 // ->addAggregateFieldList('id', 'COUNT')
    			  //->addOrderBy('affiliate_promotion_id', Rhema_Dao_Filter::ORDER_DESC) 
    			  ->setPage($page);
    	if($id){
    		$op = is_array($id) ? Rhema_Dao_Filter::OP_IN : Rhema_Dao_Filter::OP_EQ;
    		$daoFilter->addCondition('affiliate_retailer_id', $id, $op); 
    	}
    			  
    	return Rhema_Model_Service::getPaginator($daoFilter, $page);
	}
	
	public function getProductsByManufacturer($id, $limit = 50, $page = 1){
		$id = $id * 1 ;
    	$daoFilter = $this->_getProductFilters();
    	$daoFilter->setLimit($limit) 
    			  //->addGroupBy('title')
    			  //->addAggregateFieldList('id', 'COUNT')
    			  ->setPage($page);
    	if($id){
    		$daoFilter->addCondition('affiliate_product_manufacturer_id', $id); 
    	}
    			  
    	return Rhema_Model_Service::getPaginator($daoFilter, $page);
	}
	public function getProductById($id){
    	$daoFilter = $this->_getProductFilters(null, true, true);
    	$daoFilter->setOrderBy('id');
    	if(is_array($id)){
 	    	$daoFilter ->addCondition('id', $id, Rhema_Dao_Filter::OP_IN) ; 	 	  
	    	return Rhema_Model_Service::createQuery($daoFilter)->execute();   		
    	}else{
	    	$daoFilter->setLimit(1) 
	    			  ->addCondition('id', $id, Rhema_Dao_Filter::OP_EQ) ;    	 	  
	    	return Rhema_Model_Service::createQuery($daoFilter)->fetchOne();
    	}
	}
	
	public function getAlternativeProductsByTitle($title){ 
    	$daoFilter = $this->_getProductFilters();
    	$daoFilter->setLimit(1) 
    			  ->addCondition('title', $title, Rhema_Dao_Filter::OP_LRLIKE)    
    			  ->addJoin('AffiliateRetailer', Rhema_Dao_Filter::INNER_JOIN, array('is_active'))
				  ->addCondition('AffiliateRetailer.is_active', 1); 
 	  	return Rhema_Model_Service::createQuery($daoFilter)->fetchOne(); 
	}	
	
	/**
	 * Find a single product by title
	 * @param unknown_type $title
	 * @return Ambigous <boolean, Traversable>
	 */
	public function findProductByTitle($title, $page = 1, $limit = 25, $firstOnly = false){	 
		$query     = $this->getLuceneFieldSearchQuery($title, 'title'); 
		$paginator = Rhema_Search_Lucene::getPaginator($query, $page, $limit);	
 
		if($firstOnly){
			if(count($paginator)){
				$items = $paginator->getCurrentItems();
				foreach($items as $item){;
					$product = $item ;
					break;
				}
			}else{
				$product = false ;
			}
	    	return $product ;
		}else{
			return $paginator ;
		}
	}
		
	public function getProductsByTitle($title, $limit = 50, $page = 1, $exclude = '', $paginate = true){
		Rhema_Util::setMemoryLimit();
    	$daoFilter = $this->_getProductFilters();
    	$daoFilter->setLimit($limit) 
    			  ->addCondition('title', $title, Rhema_Dao_Filter::OP_LRLIKE)    			  
    			  ->setPage($page);
 	  	if($exclude){
 	  		$daoFilter->addCondition('id', $exclude, Rhema_Dao_Filter::OP_NE ) ;
 	  	}
 	  	if($paginate){
    		return Rhema_Model_Service::getPaginator($daoFilter, $page);
 	  	}else{
 	  		return Rhema_Model_Service::createQuery($daoFilter)->execute();
 	  	}
	}
	
	/**
	 * Get products with promotions / Sales
	 * @param unknown_type $limit
	 * @param unknown_type $page
	 * @return Zend_Paginator
	 */
	public function getPromotions($limit = 50, $page = 1){ 
    	$daoFilter = $this->_getProductFilters();                         
    	$daoFilter->setLimit($limit) 
    			  ->addCondition("network_promotion REGEXP 'code [[:alnum:]]'", 'code', Rhema_Dao_Filter::OP_RAW_SQL) 
    			  //->setDebug()		   
    			  ->setPage($page); 	  
    			 // pd(Rhema_Model_Service::createQuery($daoFilter));
    	return Rhema_Model_Service::getPaginator($daoFilter, $page);
	}

	public function listProductsByField($value, $field, $limit = 50, $page = 1){
	    $daoFilter = $this->_getProductFilters();
    	$daoFilter->setLimit($limit) 
    			  ->addCondition($field, $value, Rhema_Dao_Filter::OP_EQ )    			   
    			  ->setPage($page);
 	  
    	return Rhema_Model_Service::getPaginator($daoFilter, $page);	
	}
	
	public function listContractMobileDeals($limit = 50, $page = 1){
	    $daoFilter = $this->_getProductFilters();
    	$daoFilter->setLimit($limit) 
    			  //->addCondition('contract_length', null, Rhema_Dao_Filter::OP_NOT_NULL )	
    			  //->addCondition('contract_length', 0, Rhema_Dao_Filter::OP_NE ) 
    			  ->addCondition('AffiliateRetailer.affiliate_retailer_type_id', 2, Rhema_Dao_Filter::OP_NE )
    			  //->addGroupBy('title') 
    			  //->setOrderBy('countid', Rhema_Dao_Filter::ORDER_DESC)
    			  ->addJoin('AffiliateRetailer', Rhema_Dao_Filter::INNER_JOIN, array('title', 'tags')) 
    			  //->addAggregateFieldList('id', 'COUNT') 
    			  //->addJoin('AffiliateProductBrand', Rhema_Dao_Filter::INNER_JOIN, array('id', 'title', 'slug'))
    			  // ->addOrderBy('AffiliateProductBrand.sort_order', Rhema_Dao_Filter::ORDER_DESC) 
    			  // ->setDebug() 			   
    			  ->setPage($page);
 	   //pd(Rhema_Model_Service::createQuery($daoFilter)->execute());
    	$res = Rhema_Model_Service::getPaginator($daoFilter, $page);
    	
    	return $res;	
	}
	
	public function listPaygDeals($limit = 50, $page = 1){ // pay as you go deals
	    $daoFilter = $this->_getProductFilters();
    	$daoFilter->setLimit($limit) 
    			  ->addCondition('contract_length', 0, Rhema_Dao_Filter::OP_EQ ) 
    			  ->addCondition('mobile_network', null, Rhema_Dao_Filter::OP_NOT_NULL)		   
    			  ->setPage($page);
 	  
    	return Rhema_Model_Service::getPaginator($daoFilter, $page);	
	}
			
	public function countProductsByBrand(){
		$brd       = new Admin_Model_AffiliateProductBrand();
		$brandList = $brd->listBrands();
		$ids       = array_keys($brandList);
					 
    	$daoFilter = new Rhema_Dao_Filter();
    	$daoFilter->setModel(__CLASS__) 
    			  ->addFields(array('affiliate_product_brand_id'))
    			 // ->addCondition('countid > ?', array(0), Rhema_Dao_Filter::OP_RAW_SQL)
    			  ->addCondition('affiliate_product_brand_id', $ids, Rhema_Dao_Filter::OP_IN)     			  
    			  ->addAggregateFieldList('id', 'COUNT') 
    			  //->setDebug()
    			  ->setIndexBy('affiliate_product_brand_id') 
    			  ->addGroupBy('affiliate_product_brand_id') ; 
    	 
    	$res = Rhema_Model_Service::createQuery($daoFilter)->execute(); 
					
		foreach($brandList as &$item){		
			$id = $item['id'] ; 		
			$item['countid'] = isset($res[$id]) ? $res[$id]['countid'] : 0 ;	    	
		} 
		
		//pd($res, $brandList);
		return $brandList ;		
	}
	public function countProductsByManufacturer(){
		$man = new Admin_Model_AffiliateProductManufacturer();
		$manList = $man->listManufacturers();

		$ids     = array_keys($manList);		
			 
    	$daoFilter = new Rhema_Dao_Filter();
    	$daoFilter->setModel(__CLASS__) 
    			  ->addFields(array('affiliate_product_manufacturer_id'))
    			  ->addCondition('affiliate_product_manufacturer_id', $ids, Rhema_Dao_Filter::OP_IN) 
    			  ->addAggregateFieldList('id', 'COUNT')
    			  //->setDebug()
    			  ->setIndexBy('affiliate_product_manufacturer_id') 
    			  ->addGroupBy('affiliate_product_manufacturer_id') ;
    			   
		$countList = Rhema_Model_Service::createQuery($daoFilter)->execute();

		
		foreach($manList as &$item){		
			$id = $item['id'] ; 
			$item['countid'] = isset($countList[$id]) ? $countList[$id]['countid'] : 0 ; 
		} 
		
		//pd($countList, $manList);
		
		return $manList ;		
	}
	public function countProductsByRetailer(){
		$ret       = new Admin_Model_AffiliateRetailer();
		$retailers = $ret->listRetailers(); 
		$ids       = array_keys($retailers);
		
    	$daoFilter = new Rhema_Dao_Filter();
    	$daoFilter->setModel(__CLASS__) 
    			  ->addFields(array('affiliate_retailer_id')) 
    			  //->addOrderBy('countid', Rhema_Dao_Filter::ORDER_DESC)
    			  ->setIndexBy('affiliate_retailer_id') 
    			  ->addGroupBy('affiliate_retailer_id')
    			  ->addAggregateFieldList('id', 'COUNT')
    			  ->addCondition('affiliate_retailer_id',$ids , Rhema_Dao_Filter::OP_IN);  
		$countList = Rhema_Model_Service::createQuery($daoFilter)->execute();
 
		foreach($retailers as $id => $item){		
			$id = $item['id'] ; 	
			$retailers[$id]['countid'] = isset($countList[$id]) ? $countList[$id]['countid'] : 0 ;
		} 
 
    	return $retailers ;
    	
	}
	
	public static function updateExpiredCodes(){
		$now       = date(DB_DATE_FORMAT, time());
		$default   = '0000-00-00 00:00:00';
		 
		$daoFilter = new Rhema_Dao_Filter();
		$daoFilter->setQueryType(rhema_dao_filter::QUERY_TYPE_UPDATE)
				  ->setModel(__CLASS__)
				  //->setDebug()
				  ->setUpdateList(array('is_expired' => 1, 'index_status' => Rhema_Search_Lucene::INDEX_STATUS_TO_DELETE))
				  ->addCondition('is_expired', 0, Rhema_Dao_Filter::OP_EQ)
				  ->addCondition('valid_to', $now, Rhema_Dao_Filter::OP_NOT_NULL)
				  ->addCondition('valid_to', $default, Rhema_Dao_Filter::OP_NE) 
				  ->addCondition("({alias}.is_archived = 1 OR {alias}.valid_to <= ?)", array($now), Rhema_Dao_Filter::OP_RAW_SQL) 
				  ;
		//pd(Rhema_Model_Service::createQuery($daoFilter));
		$return = Rhema_Model_Service::createQuery($daoFilter)->execute();
		//pd($return);
		return $return;
	}
	
	public function getVouchers($limit = 25, $page = 1, $type = null, $retailerId = null){		 
		$now       = date(DB_DATE_FORMAT, time());
		$daoFilter = new Rhema_Dao_Filter($limit, $page); 
		//$daoFilter->addOrderBy('valid_to', Rhema_Dao_Filter::ORDER_ASC);		
    	$daoFilter = $this->_getProductFilters($daoFilter);
    	
    	$daoFilter->addCondition('code', null, Rhema_Dao_Filter::OP_NOT_NULL) 
    			  ->setLimit($limit)
    			 // ->setDebug()
    			  ->setPage($page)
    	;
    	
    	if($type){
    		$op = is_array($type) ? Rhema_Dao_Filter::OP_IN : Rhema_Dao_Filter::OP_EQ;
    		$daoFilter->addCondition('affiliate_product_type_id', $type, $op);
    	}
	    	
    	if($retailerId){
    		$op = is_array($retailerId) ? Rhema_Dao_Filter::OP_IN : Rhema_Dao_Filter::OP_EQ;
    		if(is_numeric($retailerId)){
    			$daoFilter->addCondition('affiliate_retailer_id', $retailerId, $op);
    		}else{
    			$daoFilter->addJoin('AffiliateRetailer', Rhema_Dao_Filter::INNER_JOIN, array('title', 'slug'))
    			          ->addCondition('AffiliateRetailer.slug', $retailerId, Rhema_Dao_Filter::OP_EQ);
    		}
    	}    	
    	//$return = Rhema_Model_Service::createQuery($daoFilter); 
    	//pd($return);
    	$return = Rhema_Model_Service::getPaginator($daoFilter, $page); 
    	 
    	return $return ;		
	}

	public function getVouchersGroupedByRetailer($limit, $page = 1){
		$now       = date(DB_DATE_FORMAT, time());
		 
    	$daoFilter = $this->_getProductFilters();
    	$daoFilter->addCondition('code', null, Rhema_Dao_Filter::OP_NOT_NULL)  
    			  ->setLimit($limit)
    			  //->setDebug(true)   
    			  ->addCondition('affiliate_product_type_id', Admin_Model_AffiliateProductType::TYPE_PRODUCT, Rhema_Dao_Filter::OP_NE)
    			  ->addGroupBy('affiliate_retailer_id')
    			  ->setPage($page)
    			  ->setLimit($limit);
    			 // ->addJoin('AffiliateRetailer', Rhema_Dao_Filter::INNER_JOIN, array('title', 'slug', 'logo')) ;
    	 
    	///pd(Rhema_Model_Service::createQuery($daoFilter)->execute()); 
    	$return = Rhema_Model_Service::getPaginator($daoFilter, $page); 
    	 
    	return $return ;		
	}
	
	public function countProductsByCategory(){
		$cat      = new Admin_Model_AffiliateProductCategory();
		$category = $cat->listCategory();
		$ids      = array_keys($category);
		
    	$daoFilter = new Rhema_Dao_Filter();
    	$daoFilter->setModel(__CLASS__) 
    			  ->addCondition('affiliate_product_category_id', $ids, Rhema_Dao_Filter::OP_IN) 
    			  ->addFields(array('affiliate_product_category_id', 'id'))
    			  ->setIndexBy('affiliate_product_category_id')
    			  ->addGroupBy('affiliate_product_category_id')
    			  //->setDebug()
    			  ->addAggregateFieldList('id', 'COUNT');
    			  
		$res = Rhema_Model_Service::createQuery($daoFilter)->execute();
 	    			  
		foreach($category as &$item){
			$id        = $item['id'] ;
			$item['countid'] = isset($res[$id]) ? $res[$id]['countid'] : 0 ; 
	    	  	
		}
		//pd($res, $category);
		return $category ;
	}
	
	public function countProductsByGift($limit = null){
		$gift     = new Admin_Model_AffiliatePromotion();
		$giftList = $gift->getActivePromotions();
		
		$ids       = array_keys($giftList);
    	$daoFilter = new Rhema_Dao_Filter();
    	$daoFilter->setModel(__CLASS__) 
    			  ->addCondition('affiliate_promotion_id', $ids, Rhema_Dao_Filter::OP_IN) 
    			  ->addCondition('affiliate_promotion_id', 1, Rhema_Dao_Filter::OP_NE)
    			  ->addFields(array('affiliate_promotion_id'))
    			  ->addGroupBy('affiliate_promotion_id')
    			  //->setDebug()
    			  ->setIndexBy('affiliate_promotion_id')
    			  ->addAggregateFieldList('id', 'COUNT');
	    $res = Rhema_Model_Service::createQuery($daoFilter)->fetchOne();
	  			  		
		foreach($giftList as &$item){
			$id        = $item['id'] ; 
			$item['countid'] = isset($res[$id]) ? $res[$id]['countid'] : 0 ; 
		}

    	return $giftList;
	}
		
	protected function getLuceneFieldSearchQuery($string, $field = null, $limit = 3){
		$string    = str_replace(array('/', '-'), ' ', $string);
		$string    = strtolower(trim($string));
		$list      = array_unique(array_filter(explode(' ', $string)));
		$list      = Rhema_Util_String::removeStopWords($list);
		$counter   = 0;
		if(count($list) > $limit){
			foreach($list as $i => &$t){
				if(strlen($t) <= 3 or is_numeric($t)){
					unset($list[$i]);
				}
			}
		}
		$num = count($list); 
		
		if($num > $limit){
			$list = array_slice($list, 0, $limit);
		}
		
		if($num == 1){
			$string = current($list);
			$term   = new Zend_Search_Lucene_Index_Term($string, $field);
			if(strlen($string) > 3 and !is_numeric($string)){
				$query = new Zend_Search_Lucene_Search_Query_Wildcard($term);
			}else{
				$query = new Zend_Search_Lucene_Search_Query_Term($term);
			}
		}else{
			$arr    = array(); 
			
			$query  = new Zend_Search_Lucene_Search_Query_Boolean();
			
			foreach($list as $item){
				$num--;				 
				$item     = Doctrine_Inflector::urlize($item);						
			    $arr[]    = $item;				
			}
				
			$pq     = new Zend_Search_Lucene_Search_Query_Phrase($arr);
			$query->addSubquery($pq); 
			$str = implode(' ', $arr) ;
			
			$modString = $field ? $field . ':(' . $str . ')' : $str; 			 
			$q         = Zend_Search_Lucene_Search_QueryParser::parse($modString);
			
			$query->addSubquery($q);
 
		}			
		//pd((string) $query);		
		return $query;	
	}
	
	public function searchProductIndex($searchTerm, $productType = null, $perPage = null, $page = 1, $limited = true){
		$perPage  = $perPage ? $perPage : Rhema_SiteConfig::getConfig('settings.items_per_page');
		$cache    = Rhema_Cache::getDefaultCache();
		$cacheId  = 'prodiIndexSearch' . md5($searchTerm);
		$ids      = array();
		$return   = array();
					
		if(!$ids  = $cache->load($cacheId)){
			$prd      = Doctrine_Core::getTable(__CLASS__); 
			$res      = $prd->search($searchTerm);	
 
			foreach((array)$res as $hit){
				$ids[] = $hit['id'];
			}
			
			$cache->save($ids, $cacheId, array('keywordsearch'), 10800); // 3 hours
		}
		
		if($ids){
			$filter = $this->_getProductFilters();
			if($limited){	
				$filter->setPage($page)		
					   ->setLimit($perPage);	
			} 
	    	$filter->addFields(array('title', 'id'))
	    			  ->setModel(__CLASS__) 
	    			  ->setLimit($perPage)
	    			  ->addCondition('id', $ids, Rhema_Dao_Filter::OP_IN)
	    			  //->addOrderBy('affiliate_product_type_id', Rhema_Dao_Filter::ORDER_ASC)
	    	    	  //->addOrderBy('is_expired', Rhema_Dao_Filter::ORDER_ASC) 
	    	 ;
	  	  
			if($productType){
				$filter->addCondition('affiliate_product_type_id', $productType);
			}
			
			if($limited){
				$query  = Rhema_Model_Service::createQuery($filter);  
				$return =  $query->execute();				
			}else{
				$return = Rhema_Model_Service::getPaginator($filter, $page) ;
			}
		}
		return $return;
	}
	
	public function findProduct($string, $limit = 25, $page = 1, $group = false){	 
		$query     = $this->getLuceneFieldSearchQuery($string, 'title');
		$paginator = Rhema_Search_Lucene::getPaginator($query, $page, $limit);	    	  
    	return $paginator ;
    			
/*    	$daoFilter = new Rhema_Dao_Filter();
    	$daoFilter->setModel(__CLASS__) 
    			  ->addCondition('title', $term, Rhema_Dao_Filter::OP_LRLIKE)
    			  ->addOrderBy('affiliate_promotion_id', Rhema_Dao_Filter::ORDER_DESC)    			  
    			  ->addFields($this->_getRequiredProductFields())
    			  ->addFields(array('title', 'id')) 
    			  ->setLimit($limit) ;
    	if($group){
    		$daoFilter->addGroupBy('title');
    	}
    	return Rhema_Model_Service::createQuery($daoFilter)->execute();*/
	}
	
	public function findProductByKeyword($term, $limit = 25, $page = 1, $fields = array()){ 
		$tagStr     = strip_tags($term); 
		$query      = new Zend_Search_Lucene_Search_Query_Boolean();
		$error      = false ;
		$slice      = 3 ;
		
		if(is_array($fields) and count($fields)){			
			foreach($fields as $f){
				$slice = ($slice < 1) ? 1 : $slice;
				$q = $this->getLuceneFieldSearchQuery($term, $f, $slice);
				$query->addSubquery($q);
				$slice--;
			} 
		}else{
			$titleQuery = $this->getLuceneFieldSearchQuery($term, 'title', $slice);
			$query->addSubquery($titleQuery);
		 //pd((string) $query); 	
			//$subQuery   = $this->getLuceneFieldSearchQuery($term, null, 1);
			//$query->addSubquery($subQuery, null);
		}
 	     // pd((string) $query); 	
 	    try{
			$paginator = Rhema_Search_Lucene::getPaginator($query, $page, $limit);	
 	    }catch(Exception $e){
	 	  	if(Rhema_SiteConfig::isDev()){
	 	  		pd($e->getMessage());
	 	  	}else{
	 	  		$error = true ;
	 	  	}
 	  	}   

/* 	  	if($error or count($paginator) == 0){
 	  		 $paginator = $this->searchProductIndex($term, null, $limit, $page, false);
 	  	}*/
    	return $paginator ;
	}	
	
	public function findSimilarProducts($term, $limit = 25, $page = 1){ 
		$query      = new Zend_Search_Lucene_Search_Query_Boolean();		
		$str        = strip_tags($term); 
		
		$tagStr     = str_replace('-',' ', $str);
		$list       = array_unique(array_filter(explode(' ', $tagStr)));
		$list       = Rhema_Util_String::removeStopWords($list);
		
		if(count($list) > 1){ 
			$phraseQ    = new Zend_Search_Lucene_Search_Query_Phrase($list, null, 'title');
			$query->addSubquery($phraseQ);
		}
		
 		$term       = new Zend_Search_Lucene_Index_Term($str);
		$query->addSubquery(new Zend_Search_Lucene_Search_Query_Term($term)) ;	
			 
		foreach($list as $t){
			if(!is_numeric($t)){
				$term   = new Zend_Search_Lucene_Index_Term($t);
				if(strlen($t) > 3){
					$q  = new Zend_Search_Lucene_Search_Query_Fuzzy($term, 0.7);
				}else{
					$q  = new Zend_Search_Lucene_Search_Query_Term($term);
				}
				$query->addSubquery($q);
			}
		}
 
		$paginator = Rhema_Search_Lucene::getPaginator($query, $page, $limit);	   
 
    	return $paginator ;
	}	
	public function getOffer($productId, $outlink = false){
    	$daoFilter = $this->_getProductFilters(null, true, true);
    	$daoFilter->addCondition('id', $productId) ;
    	 
    	return Rhema_Model_Service::createQuery($daoFilter)->fetchOne();		
	}
	
	public static function getProductDeepLink($id){
		$daoFilter = new Rhema_Dao_Filter();
		$daoFilter->addCondition('id', $id, Rhema_Dao_Filter::OP_EQ)
				  ->setModel(__CLASS__)
				  //->addJoin('AffiliateRetailer', Rhema_Dao_Filter::INNER_JOIN, array('is_active'))
				  //->addCondition('AffiliateRetailer.is_active', 1)
				  ->addFields(array('deeplink', 'title'));
		return Rhema_Model_Service::createQuery($daoFilter)->fetchOne();
	}
	
	public function getFeaturedOffersWithPromotion($limit = 25){ 
	    	$daoFilter = new Rhema_Dao_Filter();
	    	$daoFilter->addCondition('is_featured', 1)  
	    			  ->setModel(__CLASS__)
	    		      ->addFields(array('title', 'price', 'image_url', 'image_thumbnail_url', 'deeplink', 'affiliate_retailer_id'))
	    		      ->addCondition('is_expired', 0)
	    		      ->addCondition('image_url', "", Rhema_Dao_Filter::OP_NE)
	    			  //->setDebug()
	    		      ->setLimit ($limit);  
			$data  =  Rhema_Model_Service::createQuery($daoFilter)->execute();
			//pd($data);
 		return $data;
	}
	
	public function getFilteredSearch($data, $limit = 50, $page = 1){
		$metaData  = array();
		$daoFilter = new Rhema_Dao_Filter();	
		
		if(isset($data['sort']) and $data['sort']){
			list($field, $dir) = explode('-', $data['sort']);
			$daoFilter->addOrderBy($field, $dir);
		}
		
		$cacheData = $this->getProductStatList();
		$daoFilter->setPage($page)
				  //->setDebug()
			      ->setLimit($limit);	
			      				
		$daoFilter = $this->_getProductFilters($daoFilter);
				
		if(isset($data['network']) and $data['network']){
			$daoFilter->addCondition('mobile_network', $data['network'], Rhema_Dao_Filter::OP_EQ);
		}		
			
		if(isset($data['gift']) and $data['gift']){
			$daoFilter->addCondition('affiliate_promotion_id', $data['gift'], Rhema_Dao_Filter::OP_EQ);
		}		
			
		if(isset($data['minutes']) and $data['minutes']){
			$daoFilter->addCondition('inclusive_minutes', ($data['minutes'] -1), Rhema_Dao_Filter::OP_GT);
			$metaData[] = $data['minutes'] . ' minutes';
		}
					
		if(isset($data['texts']) and $data['texts']){
			$daoFilter->addCondition('inclusive_texts', ($data['texts'] -1), Rhema_Dao_Filter::OP_GT);
			$metaData[] = $data['texts'] . ' texts';
		}
		
		if(isset($data['price']) and $data['price']){
			$cur   = new Zend_Currency();
			$range = explode('-', $data['price']);
			$meta  = 'products  from ' . $cur->setValue($range[0]);
			$daoFilter->addCondition('price', ($range[0]- 0.01), Rhema_Dao_Filter::OP_GT);
			if(count($range) > 1){
				$daoFilter->addCondition('price', ($range[1] + 0.01), Rhema_Dao_Filter::OP_LT);
				$meta .= ' to ' . $cur->setValue($range[1]);
			} 
			$metaData[] = $meta ;
		}
			
		if(isset($data['brand']) and $data['brand']){
			$brandId = $data['brand'] ;
			if(isset($cacheData['brands'][$brandId ])){
				$metaData[] = $cacheData['brands'][$brandId ]['title'] . ' brand';
			}
			$daoFilter->addCondition('affiliate_product_brand_id', $data['brand'], Rhema_Dao_Filter::OP_EQ);
		}				
		if(isset($data['category']) and $data['category']){
			$catId = $data['category'] ;
			if(isset($cacheData['category'][$catId])){
				$metaData[] = 'in ' . $cacheData['category'][$catId]['title'] . ' category';
			}
			$daoFilter->addCondition('affiliate_product_category_id', $data['category'], Rhema_Dao_Filter::OP_EQ);
		}		
		if(isset($data['contract']) and $data['contract']){
			$daoFilter->addCondition('contract_length', $data['contract'], Rhema_Dao_Filter::OP_EQ);
			$metaData[] = $data['contract'] . ' months contract';
		}
		
 		//$daoFilter->setDebug();
 		//pd(Rhema_Model_Service::createQuery($daoFilter)->execute());
		$return = Rhema_Model_Service::getPaginator($daoFilter, $page);
		
		
		return array($return, $metaData);
	}
	
	protected function _getRequiredProductFields($prefix = '') {
		$fields = array ('id', 'title', 'keywords', 'description', 'deeplink', 'price', 
		'image_url', ' currency', 'country',  'image_large_url', 'image_thumbnail_url',  
		'mobile_network', 'contract_type', 'contract_length', 'inclusive_minutes', 
		'inclusive_texts', 'data_allowance', 'network_promotion', 'service_provider', 
		'in_stock',  'slug', 'affiliate_product_category_id', 'affiliate_product_brand_id',
		'affiliate_retailer_id', 'affiliate_promotion_id','affiliate_product_manufacturer_id',
		'created_at', 'updated_at', 'currency', 'code', 'valid_to', 'valid_from', 'product_data',
		'is_expired', 'affiliate_product_type_id'
		); 
		
		if($prefix){
			foreach($fields as &$f){
				$f = $prefix .'.'.$f ;
			}
		}
		return array_unique($fields);
	}
	protected function _getRequiredCategoryFields($prefix = '') {
		$fields = array ('title', 'keywords', 'description',  'slug' 
		); 
		
		if($prefix){
			foreach($fields as &$f){
				$f = $prefix .'.'.$f ;
			}
		}
		return $fields;
	}

	protected function _getRequiredRetailerFields($prefix = '') {
		$fields = array ('title',  'deeplink', 'slug', 'affiliate_retailer_type_id', 'image_file'); 		
		if($prefix){
			foreach($fields as &$f){
				$f = $prefix .'.'.$f ;
			}
		}
		return $fields;
	}
	
	/**
	 * Get default product filters
	 * @param Rhema_Dao_Filter $daoFilter
	 * @param unknown_type $addJoin
	 * @return Rhema_Dao_Filter
	 */
	public function _getProductFilters(Rhema_Dao_Filter $daoFilter = null, $addJoin = true, $showExpired = false){
		$daoFilter = $daoFilter ? $daoFilter : new Rhema_Dao_Filter();
    	$daoFilter->addFields($this->_getRequiredProductFields())
    			  ->setModel(__CLASS__);

    	if($showExpired == false){
    		$daoFilter->addCondition('is_expired', 0);
    	}
    	
    	if($addJoin){
    	   // $daoFilter//->addOrderBy('affiliate_product_type_id', Rhema_Dao_Filter::ORDER_ASC)
    	    		  //->addOrderBy('is_expired', Rhema_Dao_Filter::ORDER_ASC)
    	    		//  ->addCondition('is_expired', 0) 
    			      //->addJoin('AffiliateProductType', Rhema_Dao_Filter::LEFT_JOIN, array('sort_order', 'code')) 
    			  //->addJoin('AffiliateRetailer', Rhema_Dao_Filter::INNER_JOIN, array('title', 'tags')) 
    			  //->addJoin('AffiliateProductCategory',Rhema_Dao_Filter::INNER_JOIN,$this->_getRequiredCategoryFields())
    			  //->addJoin('AffiliatePromotion', Rhema_Dao_Filter::LEFT_JOIN, array('title', 'slug'))
    			  //->addOrderBy('AffiliateRetailer.affiliate_retailer_type_id')
    			  ;
    	}
    			  	
    	return $daoFilter ;	
	}
	
	public static function fixBrandId(){
		div("fixing product brand IDs");
		$count  = 0 ;
		$skipped = 0;
		$buffer = 5000;
		$page   = 1;
		$daoFilter = new Rhema_Dao_Filter();
		$brandObj  = Rhema_Model_Service::factory('affiliate_product_brand');
		$daoFilter->setLimit($buffer)
				  ->setModel(__CLASS__)
				  ->addFields(array('brand', 'affiliate_product_brand_id', 'affiliate_product_category_id'))
				  ->setHydrationMode(Doctrine_Core::HYDRATE_ON_DEMAND);
		$noFound    = array();
		$brandStore = array();
		$con        = Doctrine_Manager::getInstance()->getCurrentConnection();
		
		do{
			$daoFilter->setPage($page);
			$query    = Rhema_Model_Service::createQuery($daoFilter);
			$prods    = $query->execute();
			$numProds = count($prods);
			div("batch $page of $buffer");
			if($numProds){
				foreach($prods as $obj){
					$brandSlug = Doctrine_Inflector::urlize($obj->brand);
					if(isset($brandStore[$brandSlug])){  
						$brandId   = $brandStore[$brandSlug];
					}else{
						$brand   = $brandObj->getBrand($brandSlug, 'slug');
						if($brand){
							$brandId   = $brand['id'];
						}else{
							$brandId   = 1 ;
							$noFound[] = $obj->brand ;
						}	
						$brandStore[$brandSlug] = $brandId ;					
					}					
					
					if($obj->affiliate_product_brand_id != $brandId){
						div("updating {$obj->id} changing brand ID from {$obj->affiliate_product_brand_id} to {$brandId} [{$obj->brand} : {$brandSlug}]", '');
						$obj->affiliate_product_brand_id	= $brandId;					
						$obj->save();
						$obj->free();
						div('done!');
					}else{
						$skipped++;						
					}										
				}
				$con->flush();
				$page++;
			}
			
		}while($numProds);
				
		$result = array(
			'updated'   => $count,
			'skipped'   => $skipped,
		    'not found' => $noFound,
			'brand-count' => count($brandStore)
		); 
		div(print_r($result, true));
	}
    
    public static function getProductStatList($field = ''){
    	$return = array() ;
		$cache = Rhema_Cache::getStatCache();
		
		if($field){
			$return  = $cache->load(self::COUNT_STAT_KEY . "_$field");
		}else{
			foreach(self::$cacheSuffix as $k){
				$items       = $cache->load(self::COUNT_STAT_KEY . "_$k");
				$return[$k]  = $items ? $items : array();
			}
		}
		
		return $return; 
    }
 
    
	public static function setProductStatList($cache = null, $reset = false){	
		set_time_limit(0);
		//Rhema_Util::setMemoryLimit(); 
		div("\nCreating count cache on product table by brand, category, retailer and promotion", "\n", '');
		$start = microtime(true);
		if(!$cache){	 
	    	$cache = Rhema_Cache::getStatCache();
		}
		
		$useCache       = !$reset ; 
		$table   		= 'affiliate_product';		    
		$util    		= Rhema_Util::getInstance();
		$object  		= Rhema_Model_Service::factory('affiliate_product', true, $useCache); 				  
    	$brands  		= $object->countProductsByBrand() ;
    	
    	div(" >> brands done");
    	$retailers      = $object->countProductsByRetailer() ;
    	
    	div(" >> retailer done");
    	$category       = $object->countProductsByCategory();
    	
    	div(" >> category done");        	
		$menuModel      = MODEL_PREFIX . 'AffiliateProductCategory';
		$menu 			= new $menuModel(); 
		$container      = Admin_Model_AdminMenu::getTreeByRootId(1, $menuModel, $category);	
		 
		div(" >> menu trees done");
		$catObject      = Rhema_Model_Service::factory('affiliate_product_category', true, $useCache);
		
    	$categoryWithProducts  = array_keys($category);
    	$brandWithProducts     = array_keys($brands);
    	$retailerWithProducts  = array_keys($retailers);	
    	$limit                 =  Rhema_SiteConfig::getConfig('settings.items_per_page');
 
    	
		$return    = array( 
			'retailers' 			=> $retailers,
			'brands' 				=> $brands,
			'category'  			=> $category,
			'categoryMenu'          => $container,
			'categoryWithProducts'  => $categoryWithProducts,
			'brandWithProducts'     => $brandWithProducts,		
			'retailerWithProducts'  => $retailerWithProducts 
		);
		
		self::saveStatOption($return, $cache);
		
		$return    = array(
    		'featured'      		=> $object->getFeaturedOffersWithPromotion($limit),
    		'top50'		    		=> $object->getTopProducts(),		    
		    'types'		    		=> Rhema_Model_Service::factory('affiliate_product_type')->getTypeList(), 
    	    'manufacturers' 		=> $object->countProductsByManufacturer(),	 
		    'activeCount'		    => $object->getTotalActiveProducts(),
		    'categoryTree'		    => $catObject->buildTopLevelCategory($category),  	 		 	
			'brandCount'			=> self::countByFirstLetter($brands, $brandWithProducts),    	 
			'categoryCount'	    	=> self::countByFirstLetter($category, $categoryWithProducts),   		 
			'retailerCount'			=> self::countByFirstLetter($retailers, $retailerWithProducts) 			
    	);
  
		self::saveStatOption($return, $cache);   
		$dur = number_format(microtime(true) - $start , 2); 
		div("done! - $dur secs" , PHP_EOL, '');
		
    	return $return;
	}
	
	public static function saveStatOption(array $list = null, $cache = null){
		$cache = $cache ? $cache : Rhema_Cache::getStatCache();
    	foreach($list as $k => $items){ 
    		if(in_array($k, self::$cacheSuffix)){
	    		$key = Admin_Model_AffiliateProduct::COUNT_STAT_KEY . "_$k";
		    	div('  >> saving ' . $k, '');	    		
	    		$done = $cache->save($items, $key,  array('Admin_Model_AffiliateProduct',  $k), null);
	    		if($done){
	    	    	div(count($items) . ' done!', "\n", '');
	    		}else{
	    			div('failed!', "\n", '');
	    		}
    		}else{
    			div("$k not found");
    		}
    	}  		
	}
	
	public static function countByFirstLetter($data = array(), $withProduct = array()){
		$letterCount = array();
		$withProduct = (array) $withProduct ;
		foreach((array)$data as $item){
			$id = $item['id'];
			if(array_search($id, $withProduct) !== false){
				$firstLetter = substr(strtolower($item['title']), 0, 1);				
				if(is_numeric($firstLetter)){
					$firstLetter = 'numbers';
				} 
				
				if(isset($letterCount[$firstLetter])){
					$letterCount[$firstLetter]++;
				}else{
					$letterCount[$firstLetter] = 1;
				}	
			}		  
		}
		return $letterCount ;		
	}
	
	public static function getTotalActiveProducts(){	
		$daoFilter = new Rhema_Dao_Filter(); 
		$daoFilter ->setModel(__CLASS__)
				   ->addField('id')
				   ->addCondition('is_expired', 0, Rhema_Dao_Filter::OP_EQ)
				   ->setHydrationMode(Doctrine_Core::HYDRATE_SINGLE_SCALAR);			

		$total = Rhema_Model_Service::createQuery($daoFilter)->count();
 	 
		return $total ;
	}
	
	public function getTopProducts($limit = 50){
    	$daoFilter = $this->_getProductFilters();
    	$daoFilter->setLimit($limit)
    			  //->addJoin('AffiliateProductBrand', Rhema_Dao_Filter::INNER_JOIN, array('title')) 
    			  //->addCondition('AffiliateProductBrand.sort_order', 0, Rhema_Dao_Filter::OP_NE)
    			  //->addOrderBy('AffiliateProductBrand.sort_order', Rhema_Dao_Filter::ORDER_DESC) ;
    			  //->addJoin('AffiliatePromotion', Rhema_Dao_Filter::INNER_JOIN, array('title', 'slug'))
    			   ;  
    			 			   
 	  
    	$res = Rhema_Model_Service::createQuery($daoFilter)->execute();	
 
    	return $res;	
	}
	
	public function getRandomProducts($limit = 150){
		$fields = array('affiliate_product_type_id', 
					    'affiliate_retailer_id', 
					    'affiliate_product_category_id', 
					    'affiliate_product_brand_id',
						'id',
					    'affiliate_feed_id',
						'price',
								
		);
		$index = array_rand($fields, 1);
		$col   = $fields[$index];
		$daoFilter = new Rhema_Dao_Filter();
    	$daoFilter = $this->_getProductFilters();
    	$daoFilter->setLimit($limit)
    			 // ->addJoin('AffiliateProductBrand', Rhema_Dao_Filter::INNER_JOIN, array('title')) 
    			  ->addOrderBy($col) 
    			  ;    			 			   
 	  
    	$res = Rhema_Model_Service::createQuery($daoFilter)->execute();	
 
    	return $res;	
	}	
	
	public function getKeywords($limit, $page = 1){
    	$daoFilter = new Rhema_Dao_Filter();
    	$daoFilter->setModel(__CLASS__)
    			  ->setPage($page)
    			  ->setLimit($limit)
    			  ->addCondition('keywords', null, Rhema_Dao_Filter::OP_NOT_NULL) 
    			  ->addFields(array('keywords')) ;   			 			   	  
    	return Rhema_Model_Service::createQuery($daoFilter)->execute()		;
	}
	
	public function buildDoctrineIndex($limit = 150){
		$total    = $this->getTotalActiveProducts();
		$pages    = ceil($total/$limit); 
		$class    = Doctrine_Core::getTable(__CLASS__);
		$search = $class->getTemplate('Doctrine_Template_Searchable')
    				    ->getPlugin();
		$search->setOption('analyzer', new Rhema_Search_Analyzer()); 
					
	 	div("Building doctrine indexes - $total products in {$pages} pages");
 		
	 	for($page = 1; $page <= $pages; $page++){	 		
	 		div('page ' . $page . " of $pages ", '');
	 		$offset  = ($page  * $limit) - $limit ;
	 		$class->batchUpdateIndex($limit, $page, 'utf-8');	 
			div('done', "\n", '');
	 	}
 		div($count . ' products completed', "\n", '');		
	}
	
	public function getTagListPaginator($page = 1, $refresh = false){					
		$bootstrap = Zend_Controller_Front::getInstance()->getParam('bootstrap');
    	$cache     = Rhema_Cache::getStatCache();
    	$cacheId   = 'tagcache' . md5(__FUNCTION__) ;
    	$limit	   = 200;

    	 if($refresh){   
    		set_time_limit(0);
    		 		
    		$util     = Rhema_Util_String::getInstance();
			$cat      = Rhema_Model_Service::factory('affiliate_product_category');
			$brand    = Rhema_Model_Service::factory('affiliate_product_brand');
			$retailer = Rhema_Model_Service::factory('affiliate_retailer');
 
			
			$list     = array();
 
 			div("Building category tags", '');			 
			$str = array();
			$catKeywords         = $cat->getKeywords();
			foreach((array)$catKeywords as $item){
				if(trim($item['keywords'])){
					$str = array_merge($str, explode(',', $item['keywords']));					 
				}
			}
			
			unset($catKeywords);	
			$tagList  = $util->removeStopWords($str);
			$list = array_merge($list, $util->buildList($tagList)) ;
 			div(sprintf("done! - %s", count($list)), "\n", '');
 			
 			// ================== brand tags ===============================
    		div("Building brand tags", '');    	 	
    		$str = array();
			$brandKeywords         = $brand->getKeywords();			 
			foreach((array)$brandKeywords as $item){
				if(trim($item['keywords'])){
					$str = array_merge($str, explode(',', $item['keywords']));
				}
			}
 
			unset($brandKeywords);		
			$tagList  = $util->removeStopWords($str);
			$list     = array_merge($list, $util->buildList($tagList)) ;		 	
			div(sprintf("done! - %s", count($list)), "\n", '');
			
			//================ retailer tags ==============================
			div("Building retailer tags", '');
			$str = array();
			$retailerKeywordsTags = $retailer->getTagAndKeywords();
			foreach((array)$retailerKeywordsTags as $item){
				if($item['keywords']){
					$str = array_merge($str, explode(',', $item['keywords']));
				}
				
				if($item['tags']){
					$str = array_merge($str, explode(',', $item['tags']));
				}
			}

			unset($retailerKeywordsTags);
			$tagList  = $util->removeStopWords($str);
			$list = array_merge($list, $util->buildList($tagList)) ;
			div(sprintf("done! - %s", count($list)), "\n", '');

			div("Building cache file", '');
			arsort($list);
	  		 
			$cache->save($list, $cacheId, array('tags'), null);
			$list = $cache->load($cacheId);
			div("done!", "\n", '');
			
    	}elseif($cache->test($cacheId)){
    		$list = $cache->load($cacheId);
    	}else{
    		$list = array();
    	}
		return Rhema_Model_Service::getArrayPaginator($list, $limit, $page) ;		
	}
}