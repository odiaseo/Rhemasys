<?php

/**
 * Admin_Model_AffiliateRetailer
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage RhemaSys
 * @author     Pele Odiase <info@rhema-webdesign.com>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Admin_Model_AffiliateRetailer extends Admin_Model_Base_AffiliateRetailer
{
	public function listRetailers($mode = Doctrine_Core::HYDRATE_ARRAY){
    	$daoFilter = new Rhema_Dao_Filter();
    	$daoFilter->setModel(__CLASS__)
    		  	  ->addCondition('is_active', 1)
    		  	  ->setHydrationMode($mode)
    			  ->setOrderBy('id')
    			  ->addOrderBy('title');
    			  
    	return Rhema_Model_Service::createQuery($daoFilter)->execute();		
	}
	public function searchRetailerIndex($searchTerm, $perPage = null, $page = 1){
		$perPage  = $perPage ? $perPage : Rhema_SiteConfig::getConfig('settings.items_per_page');
		$prd      = Doctrine_Core::getTable(__CLASS__); 			
		$filter =  new Rhema_Dao_Filter($perPage, $page);
    	$filter->addFields(array('title', 'id','slug'))
    			  ->setModel(__CLASS__)  ;
  	   
		
		$query  = Rhema_Model_Service::createQuery($filter);		
		$res    = $prd->search($searchTerm, $query);	

		return $res->execute();
	}	
	public function getRetailerStartingWith($prefix = null){
		$filter = new Rhema_Dao_Filter();
		$filter->setModel(__CLASS__)
			   ->addField('id')
			   ->addOrderBy('title');
 
    	if('0-9' == $prefix){
	    	for($i=0; $i<=9; $i++){
	    		$filter->addCondition('title', $i, Rhema_Dao_Filter::OP_LLIKE,Rhema_Dao_Filter::OP_OR);
	    	}
    	}elseif($prefix){
    		$filter->addCondition('title', $prefix, Rhema_Dao_Filter::OP_LLIKE);
    	}    	
    	//return pd(Rhema_Model_Service::createQuery($filter));
		return Rhema_Model_Service::createQuery($filter)->execute();
	}
		
	public function getRetailer($id, $key = 'id'){
		$filter = new Rhema_Dao_Filter();
		$filter->setModel(__CLASS__)
			   ->addCondition('is_active', 1)
			   ->addCondition($key, $id);
		return Rhema_Model_Service::createQuery($filter)->fetchOne();		
	}
	
	public function getCloneRetailerIds($id){
		$result = array();
		$filter = new Rhema_Dao_Filter();
		$filter->setModel(__CLASS__)
			   ->addCondition('is_active', 1)
			   ->addField('id') 
			   ->setIndexBy('id')
			   ->addCondition('affiliate_retailer_id', $id);
		$data =  Rhema_Model_Service::createQuery($filter)->execute();	

		if($data){
			$result = array_keys($data);
		}
		return $result;
	}

	
	public function countProductsByRetailer(){
    	$daoFilter = new Rhema_Dao_Filter();
    	$daoFilter->setModel(__CLASS__) 
    			  ->addJoin('AffiliateProduct', Rhema_Dao_Filter::LEFT_JOIN, array('id'))
    			  ->addFields(array('id', 'title', 'slug'))
    			  ->addGroupBy('id')
    			  ->addOrderBy('title')
    			  ->addAggregateFieldList('AffiliateProduct.id', 'COUNT');
		  
    	return Rhema_Model_Service::createQuery($daoFilter)->execute();
	}
	public function getTagAndKeywords(){
    	$daoFilter = new Rhema_Dao_Filter();
    	$daoFilter->setModel(__CLASS__)
    			  ->addFields(array('keywords', 'tags')) ;   			 			   	  
    	return Rhema_Model_Service::createQuery($daoFilter)->execute()		;
	}
	
	public function fixRetailerTitle(){
		$data  = array();
		$list  = $this->listRetailers(Doctrine_Core::HYDRATE_RECORD);
		foreach($list as $item){
			$title       = html_entity_decode($item['title']) ;
			$name        = Rhema_Util_String::prepareTitleForSlug($title);
			$slug        = Doctrine_Inflector::urlize($name);
			$item->title = $title;
			
			if($item->slug != $slug){
				$exist = $this->getRetailer($slug, 'slug');
				if($exist){
					$daoFilter = new Rhema_Dao_Filter();
					$daoFilter->setModel(MODEL_PREFIX . 'AffiliateProduct')
						      ->setUpdateList(array('affiliate_retailer_id' => $exist['id']))
						      //->setDebug(true)
						      ->setQueryType(Rhema_Dao_Filter::QUERY_TYPE_UPDATE)
						      ->addCondition('affiliate_retailer_id', $item['id']);
				   $prod = Rhema_Model_Service::createQuery($daoFilter)->execute(); 
				   $data['moved'][] = "{$item['id']} moved to {$exist['id']} ({$prod})"; 
				}else{					
					$data['update'][] = "{$item->slug} updated to {$slug}";
					$item->slug = $slug ;					
				}
			}
			$item->save();					
		}			
		return $data ;
	}	
	
	public function updateRetailerFromCsv($file, $mapping = array(), $neworkData = array()){
		set_time_limit(0);
		$model       = __CLASS__ ;
		$table       = Doctrine_Core::getTable($model);
		$dbCols      = $table->getColumnNames(); 
		$mapped	     = array(); 
		$filter		 = new Rhema_View_Helper_FilterMappedFeedData(); 
		
	    foreach($dbCols as $col){
        	if(isset($mapping[$col]['columns']) and $mapping[$col]['columns']){
        		$mapped[$col] = Doctrine_Inflector::urlize($mapping[$col]['columns']);
        	}
        }
  
		if(file_exists($file) and ($handle= fopen($file,'r')) !== false){
			$cols = fgetcsv($handle);
			foreach($cols as $col){
				$cln        = Doctrine_Inflector::urlize($col);
				$feedCols[] = $cln;
			}
			while ( ($data = fgetcsv ( $handle )) !== false ) {								
				$values    = array_combine ( $feedCols, $data );
				$list      = array();
				foreach($mapped as $dbCol => $feedCol){
					$value = $values[$feedCol];
					if($value and isset($mapping[$dbCol]['filters']) and $mapping[$dbCol]['filters']){
						$value  = $filter->filterMappedFeedData($dbCol, $value, $mapping); 
					}	
					$list[$dbCol]     = $value ;
					$list['keywords'] = Rhema_Util_String::getKeywords($values); 
				}
				div('Processing ' . $list['title'], '');
				$list['affiliate_network_id'] = $neworkData['id'];
				$slug         = Doctrine_Inflector::urlize($list['title']);
				$list['slug'] = $slug ;
				$retailer     = $table->findOneBy('slug', $slug);
				
				if(!$retailer){
					$retailer = new $model();					
				}
				
				$retailer->fromArray($list);
				$retailer->save();
				$retailer->free(); 
				
				div('done!', "\n", '') ;
			}
		}
	}	
}